on:
  pull_request:
    types: [closed]
    branches:
      - main

name: Create Release

jobs:
  build:
    name: Create Release
    runs-on: ubuntu-latest
    container:
      image: ubuntu:latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install Git and jq
        run: |
          apt-get update
          apt-get install -y git jq

      - name: Initialize Git repository
        run: |
          git init
          git branch -m main
          git config --global --add safe.directory /__w/jueguito-cool-gdd/jueguito-cool-gdd
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      - name: Determine version type
        id: determine_version
        run: |
          # Get the pull request details
          pr_number=$(jq -r .pull_request.number "${GITHUB_EVENT_PATH}")
          pr_title=$(jq -r .pull_request.title "${GITHUB_EVENT_PATH}")

          # Check if the pull request was merged and to which target
          merged=$(jq -r .pull_request.merged "${GITHUB_EVENT_PATH}")
          base_branch=$(jq -r .pull_request.base.ref "${GITHUB_EVENT_PATH}")

          if [ "$merged" = true ] && [ "$base_branch" = "main" ]; then
            # Determine version type based on keywords in the PR title
            if echo "$pr_title" | grep -qiE '^\s*MAJOR'; then
              echo "::set-output name=version_type::major"
            elif echo "$pr_title" | grep -qiE '^\s*MINOR'; then
              echo "::set-output name=version_type::minor"
            elif echo "$pr_title" | grep -qiE '^\s*PATCH'; then
              echo "::set-output name=version_type::patch"
            else
              echo "::set-output name=version_type::none"
            fi
          else
            echo "::set-output name=version_type::none"
          fi

      - name: Create Release
        if: steps.determine_version.outputs.version_type != 'none'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.sha }}
          release_name: Release ${{ github.sha }}
          body: |
            Changes in this Release
            - First Change
            - Second Change
          draft: false
          prerelease: false
