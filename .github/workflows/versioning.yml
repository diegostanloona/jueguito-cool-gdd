name: Release on Merge

on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Determine new version
        id: new_version
        run: |
          # Get the latest tag
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
          
          # Extract MAJOR, MINOR, PATCH from the latest tag
          IFS='.' read -r -a version_parts <<< "$latest_tag"
          major=${version_parts[0]:-0}
          minor=${version_parts[1]:-0}
          patch=${version_parts[2]:-0}

          # Determine the type of change based on commit messages
          if git log -1 --pretty=%B | grep -iq 'MAJOR'; then
            major=$((major + 1))
            minor=0
            patch=0
          elif git log -1 --pretty=%B | grep -iq 'MINOR'; then
            minor=$((minor + 1))
            patch=0
          else
            patch=$((patch + 1))
          fi

          # Construct the new version
          new_version="$major.$minor.$patch"
          echo "New version: $new_version"
          echo "::set-output name=new_version::$new_version"

      - name: Create GitHub release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.new_version.outputs.new_version }}
          release_name: v${{ steps.new_version.outputs.new_version }}
          body: |
            Release of version v${{ steps.new_version.outputs.new_version }}
          draft: false
          prerelease: false

      - name: Push new tag
        run: |
          git tag v${{ steps.new_version.outputs.new_version }}
          git push origin v${{ steps.new_version.outputs.new_version }}